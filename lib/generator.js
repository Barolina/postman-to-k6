const generate = require('./generate')
const {
  Collection,
  Item,
  ItemGroup,
  RequestBody: { MODES: RequestBodyModes }
} = require('postman-collection')
const { escapeContent } = require('./helper')

function _convertCollection (item, result, allVariables) {
  if (ItemGroup.isItemGroup(item)) {
    var folder = item
    if (folder.auth) { throw new Error(' TODO: folder.auth') }

    result.push('')
    result.push(`  group("${folder.name}", function() {\n`)
    result.push('    let res;')
    folder.items.each(function (folderItem, index) {
      _convertCollection(folderItem, result, allVariables)
    })
    result.push('  });\n')
  } else if (Item.isItem(item)) {
    var k6Request = convertToK6Request(item)

    if (k6Request.variables) {
      k6Request.variables.forEach(function (item) {
        allVariables.push(item)
      })
    }
    result.push(k6Request.result)
  } else {
    throw new Error(' TODO: Implement postCollection item')
  }
}

function convert (collectionObject) {
  const postmanCollection = new Collection(collectionObject)
  if (!postmanCollection || postmanCollection.items.count() === 0) {
    return '// No HTTP/HTTPS transactions have been recorded.'
  }

  const MAX_REDIRECTS = 4
  var result = []
  var allVariables = []

  result.push('// Auto-generated by the Load Impact converter')
  result.push('')
  result.push('import { group } from "k6";')
  result.push('import http from "k6/http";')
  result.push('')
  result.push('export let options = {')
  result.push(`  maxRedirects: ${MAX_REDIRECTS}`)
  result.push('}')
  result.push('')
  result.push('export default function() {')

  var hasRequestsAtRootLevel = false
  postmanCollection.items.each(function (item) {
    if (Item.isItem(item)) {
      hasRequestsAtRootLevel = true
    }
  })

  if (hasRequestsAtRootLevel) {
    result.push('    let res;')
  }

  postmanCollection.items.each(function (item) {
    _convertCollection(item, result, allVariables)
  })

  if (allVariables.length) {
    allVariables = arrayUnique(allVariables)

    result.splice(4, 0, '')
    for (var j = allVariables.length - 1; j >= 0; j--) {
      const declaration = `let ${allVariables[j]} = "YOUR_VALUE";`
      result.splice(4, 0, declaration)
    }
    result.splice(4, 0, '')
  }

  result.push('}')

  return result.join('\n')
}

function arrayUnique (array) {
  var a = array.concat()
  for (var i = 0; i < a.length; ++i) {
    for (var j = i + 1; j < a.length; ++j) {
      if (a[i] === a[j]) { a.splice(j--, 1) }
    }
  }

  return a
}

function convertToK6Request (item) {
  var request = item.request
  var body = request.body
  var method
  var url
  var data
  var postRequest
  var preRequest
  var auth = request.auth
  var headerHash = {}
  var authHeader
  var headers = []

  // read method & url
  method = request.method
  url = request.url.toString()

  // read test and preRequest functions
  if (item.events.count() > 0) {
    item.events.each(function (event) {
      var script
      if (event.listen === 'test') {
        script = event.script.exec
        if (script.length) {
          // js commented
          postRequest = `\n    /**\n    ${script.join('\n    ')}\n    **/\n`
        }
      } else if (event.listen === 'prerequest') {
        script = event.script.exec
        if (script.length) {
          // js commented
          preRequest = `\n    /**\n    ${script.join('\n    ')}\n    **/\n`
        }
      }
    })
  }

  // get headers & auth into headerHash
  request.headers.each(function (header) {
    headerHash[header.key] = header.value
  })

  // add or overwrite auth header
  if (auth && auth.type) {
    var AuthenticationManager = moduleExist('./auth/' + auth.type)
    if (AuthenticationManager && AuthenticationManager.enabled) {
      authHeader = AuthenticationManager.header(request)
      if (authHeader) headerHash[authHeader.key] = authHeader.value
    } else {
      var authenticationComment
      if (auth.type === 'awsv4' || auth.type === 'hawk' || auth.type === 'oauth1') {
        authenticationComment =
          `Note: ${auth.type} dynamic authentication is not supported`
      } else if (auth.type === 'digest') {
        authenticationComment =
          `Note: ${auth.type} dynamic digest authentication is not supported`
      }

      if (authenticationComment) {
        postRequest = postRequest || ''
        postRequest += `    /** \n    ${authenticationComment}\n    **/\n`
      }
    }
  }

  Object.keys(headerHash).forEach(function (key) {
    var tmpHeader = `"${key}" : "${escapeContent(headerHash[key])}"`
    headers.push(tmpHeader)
  })

  // read body
  var bodyData = body[body.mode]
  if (bodyData) {
    if (body.mode === RequestBodyModes.raw) {
      data = escapeContent(bodyData)
    } else if (bodyData.count() > 0) {
      // body.mode === RequestBodyModes.formdata
      // body.mode === RequestBodyModes.urlencoded
      // should we add default CONTENT-TYPE Header `application/x-www-form-urlencoded`?

      var params = []
      bodyData.each(function (paramItem) {
        const item = [
          encodeURIComponent(paramItem.key),
          encodeURIComponent(paramItem.value)
        ].join('=')
        params.push(item)
      })

      data = params.join('&')
    }
  }

  return generate.request({
    url: url,
    method: method,
    headers: headers,
    data: data,
    preRequest: preRequest,
    postRequest: postRequest,
    variable: 'res'
  })
}

function moduleExist (name) {
  try { return require(name) } catch (e) { return false }
}

module.exports = convert
