/* eslint-disable no-template-curly-in-string */

import test from 'ava'
import convertFile from 'convert/file'

test('global', t => {
  const result = convertFile('test/material/2/var-global.json', {
    globals: 'test/material/2/globals.json'
  })
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";
import http from "k6/http";

export let options = { maxRedirects: 4 };

const Initial = Symbol.for("initial");
const Iteration = Symbol.for("iteration");
const Scope = Symbol.for("scope");
const Var = Symbol.for("variable");
postman[Initial]({
  global: {
    first: "one",
    second: "two",
    third: "three"
  }
});

export default function() {
  let res;

  postman[Scope](() => {
    res = http.get(${'`http://${pm[Var]("first")}.${pm[Var]("third")}`'});
  });
}
`)
})

test('collection', t => {
  const result = convertFile('test/material/2/var-collection.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";
import http from "k6/http";

export let options = { maxRedirects: 4 };

const Initial = Symbol.for("initial");
const Iteration = Symbol.for("iteration");
const Scope = Symbol.for("scope");
const Var = Symbol.for("variable");
postman[Initial]({
  collection: {
    domain: "example.com",
    machine: 573
  }
});

export default function() {
  let res;

  postman[Scope](() => {
    res = http.get(${'`http://${pm[Var]("machine")}.${pm[Var]("domain")}`'});
  });
}
`)
})

test('environment', t => {
  const result = convertFile('test/material/2/var-environment.json', {
    environment: 'test/material/2/environment.json'
  })
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";
import http from "k6/http";

export let options = { maxRedirects: 4 };

const Initial = Symbol.for("initial");
const Iteration = Symbol.for("iteration");
const Scope = Symbol.for("scope");
const Var = Symbol.for("variable");
postman[Initial]({
  environment: {
    first: "one",
    second: "two",
    third: "three"
  }
});

export default function() {
  let res;

  postman[Scope](() => {
    res = http.get(${'`http://${pm[Var]("first")}.${pm[Var]("third")}`'});
  });
}
`)
})

test('data json', t => {
  const result = convertFile('test/material/2/var-data-json.json', {
    json: 'test/material/2/data-json.json'
  })
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";
import http from "k6/http";

export let options = { maxRedirects: 4 };

const file = (() => {
  // Load data file
  const text = open("test/material/2/data-json.json");
  const rows = JSON.parse(text);
  return rows;
})();

const Initial = Symbol.for("initial");
const Iteration = Symbol.for("iteration");
const Scope = Symbol.for("scope");
const Var = Symbol.for("variable");
postman[Initial]({
  data: file
});

export default function() {
  let res;

  postman[Iteration]();

  postman[Scope](() => {
    res = http.get(${'`http://${pm[Var]("first")}.${pm[Var]("third")}`'});
  });
}
`)
})

test('data csv', t => {
  const result = convertFile('test/material/2/var-data-csv.json', {
    csv: 'test/material/2/data-csv.csv'
  })
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";
import papaparse from "./papaparse.js";
import http from "k6/http";

export let options = { maxRedirects: 4 };

const file = (() => {
  // Load data file
  const text = open("test/material/2/data-csv.csv");
  const rows = papaparse.parse(text, { header: true }).data;
  return rows;
})();

const Initial = Symbol.for("initial");
const Iteration = Symbol.for("iteration");
const Scope = Symbol.for("scope");
const Var = Symbol.for("variable");
postman[Initial]({
  data: file
});

export default function() {
  let res;

  postman[Iteration]();

  postman[Scope](() => {
    res = http.get(${'`http://${pm[Var]("first")}.${pm[Var]("third")}`'});
  });
}
`)
})
