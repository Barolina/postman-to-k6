/* eslint-disable no-template-curly-in-string */

import test from 'ava'
import convertFile from 'convert/file'

test('noauth', t => {
  const result = convertFile('test/material/2/noauth.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  postman[Request](["GET", "http://example.com"]);
}
`)
})

test('basic', t => {
  const result = convertFile('test/material/2/basic.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  postman[Request]([
    "GET",
    "http://user123:secret@example.com",
    null,
    {
      auth: "basic"
    }
  ]);
}
`)
})

test('bearer', t => {
  const result = convertFile('test/material/2/bearer.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  postman[Request]([
    "GET",
    "http://example.com",
    null,
    {
      headers: {
        Authorization: "Bearer secrettoken"
      }
    }
  ]);
}
`)
})

test('digest', t => {
  const result = convertFile('test/material/2/digest.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  postman[Request]([
    "GET",
    "http://user123:secret@example.com",
    null,
    {
      auth: "digest"
    }
  ]);
}
`)
})

test('ntlm', t => {
  const result = convertFile('test/material/2/ntlm.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  postman[Request]([
    "GET",
    "http://user123:secret@example.com",
    null,
    {
      auth: "ntlm"
    }
  ]);
}
`)
})

test('awsv4', t => {
  const result = convertFile('test/material/2/awsv4.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";
import URI from "./urijs.js";
import aws4 from "./aws4.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  let address, options, credential, signed;

  address = new URI("http://example.com");
  options = {
    method: "get",
    protocol: address.protocol(),
    hostname: address.hostname(),
    port: address.port(),
    path: address.path() + address.search(),
    region: "region",
    service: "service"
  };
  credential = {
    accessKeyId: "accesskey",
    secretAccessKey: "secretkey",
    sessionToken: "session"
  };
  signed = aws4.sign(options, credential);
  postman[Request]([
    "GET",
    ${'`http://${signed.hostname}${signed.path}`'},
    null,
    {
      headers: signed.headers
    }
  ]);
}
`)
})

test('oauth1 header sha1', t => {
  const result = convertFile('test/material/2/oauth1-header-sha1.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";
import OAuth from "./oauth-1.0a.js";
import { hmac } from "k6/crypto";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  let options, oauth, request, auth, token;

  options = {
    consumer: {
      key: "conkey",
      secret: "consec"
    },
    signature_method: "HMAC-SHA1",
    hash_function(data, key) {
      return hmac("sha1", key, data, "base64");
    },
    version: "1.0",
    realm: "realm@example.com"
  };
  request = {
    method: "GET",
    url: "http://example.com",
    data: {
      oauth_timestamp: "1",
      oauth_nonce: "10"
    }
  };
  token = {
    key: "tokkey",
    secret: "toksec"
  };
  oauth = OAuth(options);
  auth = oauth.toHeader(oauth.authorize(request, token));
  postman[Request]([
    "GET",
    "http://example.com",
    null,
    {
      headers: auth
    }
  ]);
}
`)
})

test('oauth1 header sha256', t => {
  const result = convertFile('test/material/2/oauth1-header-sha256.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";
import OAuth from "./oauth-1.0a.js";
import { hmac } from "k6/crypto";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  let options, oauth, request, auth, token;

  options = {
    consumer: {
      key: "conkey",
      secret: "consec"
    },
    signature_method: "HMAC-SHA256",
    hash_function(data, key) {
      return hmac("sha256", key, data, "base64");
    },
    version: "1.0",
    realm: "realm@example.com"
  };
  request = {
    method: "GET",
    url: "http://example.com",
    data: {
      oauth_timestamp: "1",
      oauth_nonce: "10"
    }
  };
  token = {
    key: "tokkey",
    secret: "toksec"
  };
  oauth = OAuth(options);
  auth = oauth.toHeader(oauth.authorize(request, token));
  postman[Request]([
    "GET",
    "http://example.com",
    null,
    {
      headers: auth
    }
  ]);
}
`)
})

test('oauth1 header text', t => {
  const result = convertFile('test/material/2/oauth1-header-text.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";
import OAuth from "./oauth-1.0a.js";
import { hmac } from "k6/crypto";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  let options, oauth, request, auth, token;

  options = {
    consumer: {
      key: "conkey",
      secret: "consec"
    },
    signature_method: "PLAINTEXT",
    version: "1.0",
    realm: "realm@example.com"
  };
  request = {
    method: "GET",
    url: "http://example.com",
    data: {
      oauth_timestamp: "1",
      oauth_nonce: "10"
    }
  };
  token = {
    key: "tokkey",
    secret: "toksec"
  };
  oauth = OAuth(options);
  auth = oauth.toHeader(oauth.authorize(request, token));
  postman[Request]([
    "GET",
    "http://example.com",
    null,
    {
      headers: auth
    }
  ]);
}
`)
})

test('oauth1 body', t => {
  const result = convertFile('test/material/2/oauth1-body.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";
import OAuth from "./oauth-1.0a.js";
import { hmac } from "k6/crypto";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  let options, oauth, request, auth, token;

  options = {
    consumer: {
      key: "conkey",
      secret: "consec"
    },
    signature_method: "HMAC-SHA1",
    hash_function(data, key) {
      return hmac("sha1", key, data, "base64");
    },
    version: "1.0",
    realm: "realm@example.com"
  };
  request = {
    method: "POST",
    url: "http://example.com",
    data: {
      oauth_timestamp: "1",
      oauth_nonce: "10"
    }
  };
  token = {
    key: "tokkey",
    secret: "toksec"
  };
  oauth = OAuth(options);
  auth = oauth.authorize(request, token);
  postman[Request](["POST", "http://example.com", auth]);
}
`)
})

test('oauth1 address', t => {
  const result = convertFile('test/material/2/oauth1-address.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";
import OAuth from "./oauth-1.0a.js";
import URI from "./urijs.js";
import { hmac } from "k6/crypto";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  let options, oauth, request, auth, token, address;

  options = {
    consumer: {
      key: "conkey",
      secret: "consec"
    },
    signature_method: "HMAC-SHA1",
    hash_function(data, key) {
      return hmac("sha1", key, data, "base64");
    },
    version: "1.0",
    realm: "realm@example.com"
  };
  request = {
    method: "GET",
    url: "http://example.com",
    data: {
      oauth_timestamp: "1",
      oauth_nonce: "10"
    }
  };
  token = {
    key: "tokkey",
    secret: "toksec"
  };
  oauth = OAuth(options);
  auth = oauth.authorize(request, token);
  address = new URI("http://example.com");
  for (const key of Object.keys(auth)) {
    address.addQuery(key, auth[key]);
  }
  postman[Request](["GET", address.toString(), "line1\\nline2\\nline3\\n"]);
}
`)
})

test('oauth2 header', t => {
  const result = convertFile('test/material/2/oauth2-header.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  postman[Request]([
    "GET",
    "http://example.com",
    null,
    {
      headers: {
        Authorization: "Bearer token"
      }
    }
  ]);
}
`)
})

test('oauth2 address', t => {
  const result = convertFile('test/material/2/oauth2-address.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";
import URI from "./urijs.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  let address;

  address = new URI("http://example.com");
  address.addQuery("access_token", "token");
  postman[Request](["GET", address.toString()]);
}
`)
})

test('inherit collection', t => {
  const result = convertFile('test/material/2/inherit-collection.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  postman[Request]([
    "GET",
    "http://example.com",
    null,
    {
      headers: {
        Authorization: "Bearer token"
      }
    }
  ]);
}
`)
})

test('inherit folder', t => {
  const result = convertFile('test/material/2/inherit-folder.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";
import { group } from "k6";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  group("TestFolder", function() {
    postman[Request]([
      "GET",
      "http://example.com",
      null,
      {
        headers: {
          Authorization: "Bearer token"
        }
      }
    ]);
  });
}
`)
})

test('inherit nested', t => {
  const result = convertFile('test/material/2/inherit-nested.json')
  t.is(result, `// Auto-generated by the Load Impact converter

import "./postman-shim.js";
import { group } from "k6";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
const Var = Symbol.for("variable");

export default function() {
  group("TestFolder1", function() {
    group("TestFolder2", function() {
      group("TestFolder3", function() {
        group("TestFolder4", function() {
          postman[Request]([
            "GET",
            "http://example.com",
            null,
            {
              headers: {
                Authorization: "Bearer token"
              }
            }
          ]);
        });
      });
    });
  });
}
`)
})
